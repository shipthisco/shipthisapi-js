import { ShipthisAPI } from '../main';
import { AddNewCustomerData, AddNewShipper, LoadType, RequestAirLoad, RequestBulkSeaLoad, RequestfclSeaLoad, RequestftlLandLoad, RequestlclSeaLoad, RequestltlLandLoad, RequestRoroSeaLoad } from '../interfaces/load.interface';
import { ConversationPayload } from '../interfaces/conversation.interface';
import { AirShipment, LandShipment, SeaShipment } from '../interfaces/collection.interface';
export declare class Shipment {
    obj: ShipthisAPI;
    constructor(obj: ShipthisAPI);
    getSomeShipments(filter: any): Promise<any>;
    getAllShipments(): Promise<any>;
    getAllAirFreight(): Promise<any>;
    getAllSeaFreight(): Promise<any>;
    getAllLandFreight(): Promise<any>;
    getAirFreight(ObjectId: string): Promise<any>;
    getSeaFreight(ObjectId: string): Promise<any>;
    getLandFreight(ObjectId: string): Promise<any>;
    updateAirFreight(ObjectId: string, updatedData: AirShipment): Promise<any>;
    updateSeaFreight(ObjectId: string, updatedData: SeaShipment): Promise<any>;
    updateLandFreight(ObjectId: string, updatedData: LandShipment): Promise<any>;
    createAirFreight(data: AirShipment): Promise<any>;
    createSeaFreight(data: SeaShipment): Promise<any>;
    createLandFreight(data: LandShipment): Promise<any>;
    deleteAirFreight(ObjectId: string): Promise<any>;
    deleteSeaFreight(ObjectId: string): Promise<any>;
    deleteLandFreight(ObjectId: string): Promise<any>;
    getAirPort(data?: string): Promise<any>;
    getCustomers(data?: string): Promise<any>;
    createCustomer(data: AddNewCustomerData): Promise<any>;
    createCustomerParty(data: AddNewShipper, id: string): Promise<any>;
    getShipmentTerms(data: any): Promise<any>;
    getQuotationReference(data?: any): Promise<any>;
    getMasterShipment(data?: any): Promise<any>;
    getConsignee(data: string, id: string): Promise<any>;
    getShipper(data: string, id: string): Promise<any>;
    getPickUpNDelivery(data: string, id: string): Promise<any>;
    getNotifyParty(data: string, id: string): Promise<any>;
    getGoogleLocation(data?: string): Promise<any>;
    selectGoogleLocations(placeId: string, description: string): Promise<any>;
    getForwordingAgent(data?: string): Promise<any>;
    getConsolidator(data?: string): Promise<any>;
    getPlaceOfConsolidation(data?: string): Promise<any>;
    getAllOperationExecutive(): Promise<any>;
    getOperationExecutive(data?: string): Promise<any>;
    getAirlineName(): Promise<any>;
    getAllCurrency(): Promise<any>;
    getCurrency(data?: string): Promise<any>;
    CartageByAndCustomClearance(data?: string): Promise<any>;
    getProductType(): Promise<any>;
    getShippingLineName(): Promise<any>;
    getVesselName(data?: string): Promise<any>;
    getSeaPort(data?: string): Promise<any>;
    getPickup(data?: string): Promise<any>;
    getCustomClearance(data?: string): Promise<any>;
    getLandCarrier(data?: string): Promise<any>;
    getVehicleType(data?: string): Promise<any>;
    getPackageTypeList(data?: string): Promise<{
        items: LoadType[];
    }>;
    getPackageType({ data, }: {
        data: string;
    }): Promise<LoadType>;
    getContainerType(data?: string): Promise<any>;
    getHarzardUnNumber(data?: string): Promise<any>;
    getHarzardClass(data?: string): Promise<any>;
    initiaConversation(data: ConversationPayload): Promise<any>;
    createAirLoad(data: RequestAirLoad): Promise<any>;
    createSeaFclLoad(data: RequestfclSeaLoad): Promise<any>;
    createSeaLclLoad(data: RequestlclSeaLoad): Promise<any>;
    createSeaRoroLoad(data: RequestRoroSeaLoad): Promise<any>;
    createSeaBulkLoad(data: RequestBulkSeaLoad): Promise<any>;
    createLandFtlLoad(data: RequestftlLandLoad): Promise<any>;
    createLandltlLoad(data: RequestltlLandLoad): Promise<any>;
    createLandFclLoad(data: RequestftlLandLoad): Promise<any>;
}
